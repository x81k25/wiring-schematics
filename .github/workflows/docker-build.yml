name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - stg
      - dev

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/wst-flyway

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch name (e.g., dev, main)
            type=ref,event=branch
            # PR number (e.g., pr-123)
            type=ref,event=pr
            # 8-character SHA only
            type=sha,format=short

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: flyway-migrations:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Test migrations with Flyway
        run: |
          docker run --rm \
            --network ${{ job.services.postgres.network }} \
            -e FLYWAY_URL="jdbc:postgresql://postgres:5432/test_db" \
            -e FLYWAY_USER="postgres" \
            -e FLYWAY_PASSWORD="postgres" \
            -e FLYWAY_LOCATIONS="filesystem:/flyway/sql" \
            -v "${{ github.workspace }}/migrations:/flyway/sql:ro" \
            flyway-migrations:test \
            migrate

      - name: Validate migrations
        run: |
          docker run --rm \
            --network ${{ job.services.postgres.network }} \
            -e FLYWAY_URL="jdbc:postgresql://postgres:5432/test_db" \
            -e FLYWAY_USER="postgres" \
            -e FLYWAY_PASSWORD="postgres" \
            -e FLYWAY_LOCATIONS="filesystem:/flyway/sql" \
            -v "${{ github.workspace }}/migrations:/flyway/sql:ro" \
            flyway-migrations:test \
            validate

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha

      - name: Install tbls and PostgreSQL client
        run: |
          # Install PostgreSQL client for debugging
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
          # Install tbls
          curl -L -o tbls.tar.gz https://github.com/k1LoW/tbls/releases/download/v1.77.0/tbls_v1.77.0_linux_amd64.tar.gz
          tar -xzf tbls.tar.gz
          sudo mv tbls /usr/local/bin/
          rm tbls.tar.gz

      - name: Generate database documentation
        run: |
          # Debug: Check database connection and schema
          echo "Checking database connection..."
          psql -h localhost -U postgres -d test_db -c "SELECT version();"
          echo "Checking for atp schema..."
          psql -h localhost -U postgres -d test_db -c "SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'atp';"
          echo "Checking tables in atp schema..."
          psql -h localhost -U postgres -d test_db -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'atp';"
          
          # Generate documentation from test database (migrations already applied)
          echo "Generating documentation with tbls..."
          TBLS_DSN="postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable" \
          tbls doc
          
          # Debug: Check what files were generated in current directory
          echo "Files in current directory:"
          ls -la
          echo "Files in dbdoc directory (if exists):"
          ls -la dbdoc/ || echo "dbdoc directory not found"
          echo "Files in docs directory:"
          ls -la docs/
          
          # Move generated files to docs directory if they were created in dbdoc
          if [ -d "dbdoc" ]; then
            echo "Moving files from dbdoc/ to docs/"
            mv dbdoc/* docs/
            rmdir dbdoc
          fi
          
          echo "Final files in docs directory:"
          ls -la docs/
        env:
          TBLS_DSN: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          PGPASSWORD: postgres

      - name: Commit documentation changes
        if: github.ref == 'refs/heads/dev'
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add docs/
          if ! git diff --cached --quiet; then
            git commit -m "docs: update database schema documentation [skip ci]"
            git push
          fi